import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import { useState, useEffect } from 'react';
import { useSession, signIn, signOut } from "next-auth/react";
import { createTodo, getTodos, deleteTodo, updateTodo, updateCompletion, OneToDo } from '@/apiCalls';

export default function Home() {

 const { data: session } = useSession();

 const [postData, setPostData] = useState({
   description: "",
   username: "",
 });

 const [completed, setCompleted] = useState<boolean>(false)

 const [todos, setTodos] = useState([])
 const [lastIndex, setLastIndex] = useState<number>(0)
 const [needCompleted, setNeedCompleted] = useState<number>(0)

 const getTodo = async() => {
  try {
    let counter = 0
    const allTodos = await getTodos(postData.username);
    setTodos(allTodos.data.todos.todo);
    setLastIndex(todos.length - 1);
    todos.forEach((todo: OneToDo) => {
      if(todo.completed === false) {
        counter++;
      }
    })
   setNeedCompleted(counter)
  } catch (error) {
    console.log(error)
  }
 }

 const handleSubmit = async (e: React.ChangeEvent<HTMLFormElement>) => {
   e.preventDefault();
   await createTodo({
     username: postData.username,
     description: postData.description,
     completed: completed,
   });
   setPostData({ description: "", username: "" });
   setCompleted(false);
   await getTodo();
 };

 const updateTodoCompletion = async(todo:OneToDo) => {
   await updateCompletion(
      postData.username,
      todo.description,
      String(!todo.completed)
    );
    await getTodo()
 }

 const deleteTheTodo = async (
   username: string,
   description: string,
   completed: string
 ) => {
   await deleteTodo(username, description, completed);
   await getTodo();
 };

//  const clearCompletion = async() => {
//    await getTodo()
//    todos.forEach(async(todo:OneToDo) => {
//     if(String(todo.completed) === String(true)) {
//        await deleteTodo(todo.username, todo.description, String(todo.completed));
//     }
//    })
//     await getTodo();
//  }

 useEffect(() => {
    const username = session?.user?.name as string;
    const newUsername = username?.replace(/\s+/g, "_");
    setPostData({ ...postData, username: newUsername });
    getTodo()
 }, [postData.description, completed])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-screen bg-cover">
        <div className="bg-mobile bg-no-repeat bg-cover bg-center h-60 w-full">
          <div className="flex pt-14 px-6 bg-transparent justify-between">
            <h1 className="text-white w-0 text-3xl font-bold tracking-todo">
              TODO
            </h1>
            <img
              className="cursor-pointer pt-1 w-[7%] h-[7%] bg-transparent"
              src="/images/icon-moon.svg"
              alt=""
            />
          </div>
        </div>
        {session ? (
          <>
            <form
              className="flex mx-auto w-[80%] h-12 rounded-md relative bottom-[7rem]"
              onSubmit={handleSubmit}
            >
              <div
                onClick={() => setCompleted(!completed)}
                className="w-[20%] cursor-pointer flex justify-center items-center rounded-md h-12"
              >
                <div
                  className={
                    completed === false
                      ? styles.complete
                      : "bg-check w-[20px] hover:opacity-50 h-[20px] flex justify-center items-center rounded-full"
                  }
                >
                  <img
                    className="bg-transparent"
                    src="/images/icon-check.svg"
                    alt=""
                  />
                </div>
              </div>
              <input
                value={postData.description}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                  setPostData({ ...postData, description: e.target.value })
                }
                placeholder="Create a todo..."
                className="w-[80%] outline-none rounded-md"
                type="text"
              />
            </form>
            {todos.map((todo:OneToDo, index) => {
              return (
                <>
                  <div
                    key={index}
                    className={
                      index > 0
                        ? "flex mx-auto w-[80%] text-gray-500 h-12 border-b-[1px] border-gray-300 relative bottom-[4.5rem]"
                        : "flex mx-auto w-[80%] h-12 rounded-t-md border-b-[1px] border-gray-300 relative bottom-[4.5rem]"
                    }
                  >
                    <div
                      onClick={() => updateTodoCompletion(todo)}
                      className="w-[20%] cursor-pointer flex justify-center items-center border-b-[1px] border-gray-300 rounded-t-md  h-12"
                    >
                      <div
                        className={
                          todo.completed === false
                            ? styles.complete
                            : "bg-check w-[20px] hover:opacity-50 h-[20px] flex justify-center items-center rounded-full"
                        }
                      >
                        <img
                          className="bg-transparent"
                          src="/images/icon-check.svg"
                          alt=""
                        />
                      </div>
                    </div>
                    <input
                      value={todo.description}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                        setPostData({
                          ...postData,
                          description: e.target.value,
                        })
                      }
                      placeholder="Create a todo..."
                      className={
                        todo.completed
                          ? "w-[60%] line-through text-gray-400 outline-none"
                          : "w-[60%] text-gray-400 outline-none"
                      }
                      type="text"
                      readOnly={true}
                    />
                    <div onClick={() => deleteTheTodo(postData.username, todo.description, String(todo.completed))} className="w-[20%] rounded-t-md flex justify-center items-center">
                      <img
                        className="w-[25%] cursor-pointer hover:opacity-50"
                        src="/images/icon-cross.svg"
                        alt=""
                      />
                    </div>
                  </div>
                  {index === lastIndex && (
                    <div className="flex justify-between shadow-sm text-gray-400 text-sm px-4 items-center w-[80%] relative bottom-[4.5rem] h-12 mx-auto rounded-b-md">
                      <p>{needCompleted} items left</p>
                      <p  className='cursor-pointer hover:opacity-50'>Clear Completed</p>
                    </div>
                  )}
                </>
              );
            })}
            <div
              onClick={() => signOut()}
              className="flex justify-center cursor-pointer"
            >
              Sign out
            </div>
            {/* Signed in as <span className='text-black'>{session.user?.name}</span> <br />
        <button className="w-40 h-40 bg-black" onClick={() => signOut()}>
          Sign out
        </button> */}
          </>
        ) : (
          <>
            <h1 className="text-center">REGISTER</h1>
            <div className="flex text-white font-bold text-2xl justify-center">
              <div className="w-80%">
                <div className="drop-shadow-lg pt-10 text-sm text-black rounded-md h-80">
                  <div className="pl-5 pb-4">
                    <p>Set Username</p>
                    <input
                      placeholder="username"
                      className="drop-shadow-md rounded-sm w-[55%]"
                    ></input>
                    <p className="pt-6 ">Set Password</p>
                    <input
                      placeholder="username"
                      className="drop-shadow-md rounded-sm w-[55%]"
                    ></input>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="bg-black opacity-50 h-[1px] w-[40%]"></div>
                    <h1 className="text-black opacity-50">or</h1>
                    <div className="bg-black h-[1px] opacity-50  w-[40%]"></div>
                  </div>
                  <div className="flex pt-8 justify-center  mx-auto w-[200px] items-center rounded-md shadow-md">
                    <button onClick={() => signIn()}>Login As</button>
                  </div>
                </div>
              </div>
            </div>
          </>
        )}
      </main>
    </>
  );
}




//  {
//    todos?.map((todo) => {
//      return (
//        <div>
//          <div className="text-black font-bold">{todo?.description}</div>
//          <div className="text-black font-bold">{String(todo?.completed)}</div>
//          <button
//            className="text-black font-bold"
//            onClick={() =>
//              updateCompletion(
//                postData.username,
//                todo.description,
//                String(!todo.completed)
//              )
//            }
//          >
//            UPDATE THIS NOW!!!!
//          </button>
//        </div>
//      );
//    });
//  }