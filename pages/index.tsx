//Define Types
//Enable Drag And Drop
//Toggle Light and Dark
//Enable Regular Username/Password Authentication

import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useState, useEffect } from 'react';
import { getSession, useSession, signIn, signOut } from "next-auth/react";
import { createTodo, getTodos, deleteTodo, updateTodo, updateCompletion, OneToDo, deleteCompleted } from '@/apiCalls';

export default function Home({name}:any) {

 const { data: session } = useSession();

 const [postData, setPostData] = useState({
   description: "",
   username: name,
 });

 const [completed, setCompleted] = useState<boolean>(false)

 const [todos, setTodos] = useState([])
 const [lastIndex, setLastIndex] = useState<number>(0)
 const [needCompleted, setNeedCompleted] = useState<number>(0)
 const [selection, setSelection] = useState<string>("")
 const [editedText, setEditedText] = useState<string>("")
 const [editCompleted, setEditCompleted] = useState<boolean>(false)
 const [canEdit, setCanEdit] = useState<boolean>(false)
 const [editIndex, setEditIndex] = useState<number>(0)

 const enableEdit = (description:string, index:number) => {
   setEditedText(description)
   setCanEdit(true)
   setEditIndex(index)
 }

 const updateDescription = async(
   description: string,
   newDescription: string
 ) => {
   await updateTodo(name, description, newDescription, editCompleted)
   setCanEdit(false)
   setEditCompleted(false)
   setEditedText("")
   setEditIndex(0)
 };

 const getTodo = async() => {
  try {
    let counter = 0
    const allTodos = await getTodos(name);
    setTodos(allTodos.data.todos.todo);
    setLastIndex(todos.length - 1);
    todos.forEach((todo: OneToDo) => {
      if(todo.completed === false) {
        counter++;
      }
    })
  setNeedCompleted(counter)
  } catch (error) {
    console.log(error)
  }
 }

 const handleSubmit = async (e: React.ChangeEvent<HTMLFormElement>) => {
   e.preventDefault();
   await createTodo({
     username: name,
     description: postData.description,
     completed: completed,
   });
   setPostData({ description: "", username: "" });
   setCompleted(false);
 };


 useEffect(() => {
     getTodo();
 })

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-screen bg-cover">
        <div className="bg-mobile bg-no-repeat bg-cover bg-center h-60 w-full">
          <div className="flex pt-14 px-6 bg-transparent justify-between">
            <h1 className="text-white w-0 text-3xl font-bold tracking-todo">
              TODO
            </h1>
            <img
              className="cursor-pointer pt-1 w-[7%] h-[7%] bg-transparent hover:opacity-50"
              src="/images/icon-moon.svg"
              alt=""
            />
          </div>
        </div>
        {session ? (
          <>
            <form
              className="flex mx-auto w-[80%] h-12 rounded-md relative bottom-[7rem]"
              onSubmit={handleSubmit}
            >
              <div className="flex justify-center rounded-l-md items-center w-[20%]">
                <div
                  onClick={() => setCompleted(!completed)}
                  className={styles.circleOuter}
                >
                  <div
                    className={
                      completed === false
                        ? styles.circleInner
                        : "bg-check w-[18px] hover:opacity-50 h-[18px] flex justify-center items-center rounded-full"
                    }
                  >
                    <img
                      className="bg-transparent"
                      src="/images/icon-check.svg"
                      alt=""
                    />
                  </div>
                </div>
              </div>
              <input
                value={postData.description}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                  setPostData({ ...postData, description: e.target.value })
                }
                placeholder="Create a todo..."
                className="w-[80%] outline-none rounded-md"
                type="text"
              />
            </form>
            {todos.length > 0 &&
              (selection === "" || selection === "All") &&
              todos.map((todo: OneToDo, index: number) => {
                return (
                  <div key={index}>
                    <div
                      className={
                        index > 0
                          ? "flex mx-auto w-[80%] text-gray-500 h-12 border-b-[1px] border-gray-300 relative bottom-[4.5rem]"
                          : "flex mx-auto w-[80%] h-12 rounded-t-md border-b-[1px] border-gray-300 relative bottom-[4.5rem]"
                      }
                    >
                      {canEdit && index === editIndex ? (
                        <div className="flex justify-center rounded-l-md items-center w-[20%]">
                          <div
                            onClick={() => setEditCompleted(!editCompleted)}
                            className={styles.circleOuter}
                          >
                            <div
                              className={
                                editCompleted === false
                                  ? styles.circleInner
                                  : "bg-check w-[18px] hover:opacity-50 h-[18px] flex justify-center items-center rounded-full"
                              }
                            >
                              <img
                                className="bg-transparent"
                                src="/images/icon-check.svg"
                                alt=""
                              />
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div className="flex justify-center rounded-l-md items-center w-[20%]">
                          <div
                            onClick={() =>
                              updateCompletion(
                                name,
                                todo.description,
                                String(!todo.completed)
                              )
                            }
                            className={styles.circleOuter}
                          >
                            <div
                              className={
                                todo.completed === false
                                  ? styles.circleInner
                                  : "bg-check w-[18px] hover:opacity-50 h-[18px] flex justify-center items-center rounded-full"
                              }
                            >
                              <img
                                className="bg-transparent"
                                src="/images/icon-check.svg"
                                alt=""
                              />
                            </div>
                          </div>
                        </div>
                      )}

                      {canEdit && index === editIndex ? (
                        <input
                          value={editedText}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                            setEditedText(e.target.value)
                          }
                          placeholder="Create a todo..."
                          className="w-[60%] text-black outline-none"
                          type="text"
                        />
                      ) : (
                        <input
                          value={todo.description}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                            setPostData({
                              ...postData,
                              description: e.target.value,
                            })
                          }
                          placeholder="Create a todo..."
                          className={
                            todo.completed
                              ? "w-[60%] line-through text-gray-400 outline-none"
                              : "w-[60%] text-black outline-none"
                          }
                          type="text"
                          readOnly={true}
                        />
                      )}
                      {canEdit && index === editIndex ? (
                        <div className="flex justify-center items-center">
                          <button
                            onClick={() =>
                              updateDescription(todo.description, editedText)
                            }
                            className="flex justify-center items-center p-1 text-sm text-black bg-check rounded-md hover:opacity-50"
                          >
                            Update
                          </button>
                        </div>
                      ) : (
                        <div className="flex justify-center items-center">
                          <button
                            onClick={() => enableEdit(todo.description, index)}
                            className="flex justify-center items-center p-1 text-sm text-black bg-check rounded-md hover:opacity-50"
                          >
                            Edit
                          </button>
                        </div>
                      )}

                      <div
                        onClick={() =>
                          deleteTodo(
                            name,
                            todo.description,
                            String(todo.completed)
                          )
                        }
                        className="w-[5%] rounded-t-md flex items-center"
                      ></div>
                      <div
                        onClick={() =>
                          deleteTodo(
                            name,
                            todo.description,
                            String(todo.completed)
                          )
                        }
                        className="w-[15%] rounded-t-md flex justify-center items-center"
                      >
                        <img
                          className="w-[25%] cursor-pointer hover:opacity-50"
                          src="/images/icon-cross.svg"
                          alt=""
                        />
                      </div>
                    </div>
                    {index === lastIndex && (
                      <div
                        onClick={() => deleteCompleted(name)}
                        className="flex justify-between shadow-sm text-gray-400 text-sm px-4 items-center w-[80%] relative bottom-[4.5rem] h-12 mx-auto rounded-b-md"
                      >
                        <p>{needCompleted} items left</p>
                        <p className="cursor-pointer hover:opacity-50">
                          Clear Completed
                        </p>
                      </div>
                    )}
                  </div>
                );
              })}
            {todos.length > 0 &&
              selection === "Active" &&
              todos
                .filter((todo: OneToDo) => !todo.completed)
                .map((todo: OneToDo, index: number) => {
                  return (
                    <div key={index}>
                      <div
                        className={
                          index > 0
                            ? "flex mx-auto w-[80%] text-gray-500 h-12 border-b-[1px] border-gray-300 relative bottom-[4.5rem]"
                            : "flex mx-auto w-[80%] h-12 rounded-t-md border-b-[1px] border-gray-300 relative bottom-[4.5rem]"
                        }
                      >
                        {canEdit && index === editIndex ? (
                          <div className="flex justify-center rounded-l-md items-center w-[20%]">
                            <div
                              onClick={() => setEditCompleted(!editCompleted)}
                              className={styles.circleOuter}
                            >
                              <div
                                className={
                                  editCompleted === false
                                    ? styles.circleInner
                                    : "bg-check w-[18px] hover:opacity-50 h-[18px] flex justify-center items-center rounded-full"
                                }
                              >
                                <img
                                  className="bg-transparent"
                                  src="/images/icon-check.svg"
                                  alt=""
                                />
                              </div>
                            </div>
                          </div>
                        ) : (
                          <div className="flex justify-center rounded-l-md items-center w-[20%]">
                            <div
                              onClick={() =>
                                updateCompletion(
                                  name,
                                  todo.description,
                                  String(!todo.completed)
                                )
                              }
                              className={styles.circleOuter}
                            >
                              <div
                                className={
                                  todo.completed === false
                                    ? styles.circleInner
                                    : "bg-check w-[18px] hover:opacity-50 h-[18px] flex justify-center items-center rounded-full"
                                }
                              >
                                <img
                                  className="bg-transparent"
                                  src="/images/icon-check.svg"
                                  alt=""
                                />
                              </div>
                            </div>
                          </div>
                        )}
                        {canEdit && index === editIndex ? (
                          <input
                            value={editedText}
                            onChange={(
                              e: React.ChangeEvent<HTMLInputElement>
                            ) => setEditedText(e.target.value)}
                            placeholder="Create a todo..."
                            className="w-[60%] text-black outline-none"
                            type="text"
                          />
                        ) : (
                          <input
                            value={todo.description}
                            onChange={(
                              e: React.ChangeEvent<HTMLInputElement>
                            ) =>
                              setPostData({
                                ...postData,
                                description: e.target.value,
                              })
                            }
                            placeholder="Create a todo..."
                            className={
                              todo.completed
                                ? "w-[60%] line-through text-gray-400 outline-none"
                                : "w-[60%] text-black outline-none"
                            }
                            type="text"
                            readOnly={true}
                          />
                        )}
                        {canEdit && index === editIndex ? (
                          <div className="flex justify-center items-center">
                            <button
                              onClick={() =>
                                updateDescription(todo.description, editedText)
                              }
                              className="flex justify-center items-center p-1 text-sm text-black bg-check rounded-md hover:opacity-50"
                            >
                              Update
                            </button>
                          </div>
                        ) : (
                          <div className="flex justify-center items-center">
                            <button
                              onClick={() =>
                                enableEdit(todo.description, index)
                              }
                              className="flex justify-center items-center p-1 text-sm text-black bg-check rounded-md hover:opacity-50"
                            >
                              Edit
                            </button>
                          </div>
                        )}
                        <div
                          onClick={() =>
                            deleteTodo(
                              name,
                              todo.description,
                              String(todo.completed)
                            )
                          }
                          className="w-[20%] rounded-t-md flex justify-center items-center"
                        >
                          <img
                            className="w-[25%] cursor-pointer hover:opacity-50"
                            src="/images/icon-cross.svg"
                            alt=""
                          />
                        </div>
                      </div>
                      {index === lastIndex && (
                        <div
                          onClick={() => deleteCompleted(name)}
                          className="flex justify-between shadow-sm text-gray-400 text-sm px-4 items-center w-[80%] relative bottom-[4.5rem] h-12 mx-auto rounded-b-md"
                        >
                          <p>{needCompleted} items left</p>
                          <p className="cursor-pointer hover:opacity-50">
                            Clear Completed
                          </p>
                        </div>
                      )}
                    </div>
                  );
                })}
            {todos.length > 0 &&
              selection === "Completed" &&
              todos
                .filter((todo: OneToDo) => todo.completed)
                .map((todo: OneToDo, index: number) => {
                  return (
                    <div key={index}>
                      <div
                        className={
                          index > 0
                            ? "flex mx-auto w-[80%] text-gray-500 h-12 border-b-[1px] border-gray-300 relative bottom-[4.5rem]"
                            : "flex mx-auto w-[80%] h-12 rounded-t-md border-b-[1px] border-gray-300 relative bottom-[4.5rem]"
                        }
                      >
                        {canEdit && index === editIndex ? (
                          <div className="flex justify-center rounded-l-md items-center w-[20%]">
                            <div
                              onClick={() => setEditCompleted(!editCompleted)}
                              className={styles.circleOuter}
                            >
                              <div
                                className={
                                  editCompleted === false
                                    ? styles.circleInner
                                    : "bg-check w-[18px] hover:opacity-50 h-[18px] flex justify-center items-center rounded-full"
                                }
                              >
                                <img
                                  className="bg-transparent"
                                  src="/images/icon-check.svg"
                                  alt=""
                                />
                              </div>
                            </div>
                          </div>
                        ) : (
                          <div className="flex justify-center rounded-l-md items-center w-[20%]">
                            <div
                              onClick={() =>
                                updateCompletion(
                                  name,
                                  todo.description,
                                  String(!todo.completed)
                                )
                              }
                              className={styles.circleOuter}
                            >
                              <div
                                className={
                                  todo.completed === false
                                    ? styles.circleInner
                                    : "bg-check w-[18px] hover:opacity-50 h-[18px] flex justify-center items-center rounded-full"
                                }
                              >
                                <img
                                  className="bg-transparent"
                                  src="/images/icon-check.svg"
                                  alt=""
                                />
                              </div>
                            </div>
                          </div>
                        )}
                        {canEdit && index === editIndex ? (
                          <input
                            value={editedText}
                            onChange={(
                              e: React.ChangeEvent<HTMLInputElement>
                            ) => setEditedText(e.target.value)}
                            placeholder="Create a todo..."
                            className="w-[60%] text-black outline-none"
                            type="text"
                          />
                        ) : (
                          <input
                            value={todo.description}
                            onChange={(
                              e: React.ChangeEvent<HTMLInputElement>
                            ) =>
                              setPostData({
                                ...postData,
                                description: e.target.value,
                              })
                            }
                            placeholder="Create a todo..."
                            className={
                              todo.completed
                                ? "w-[60%] line-through text-gray-400 outline-none"
                                : "w-[60%] text-black outline-none"
                            }
                            type="text"
                            readOnly={true}
                          />
                        )}
                        {canEdit && index === editIndex ? (
                          <div className="flex justify-center items-center">
                            <button
                              onClick={() =>
                                updateDescription(todo.description, editedText)
                              }
                              className="flex justify-center items-center p-1 text-sm text-black bg-check rounded-md hover:opacity-50"
                            >
                              Update
                            </button>
                          </div>
                        ) : (
                          <div className="flex justify-center items-center">
                            <button
                              onClick={() =>
                                enableEdit(todo.description, index)
                              }
                              className="flex justify-center items-center p-1 text-sm text-black bg-check rounded-md hover:opacity-50"
                            >
                              Edit
                            </button>
                          </div>
                        )}
                        <div
                          onClick={() =>
                            deleteTodo(
                              name,
                              todo.description,
                              String(todo.completed)
                            )
                          }
                          className="w-[20%] rounded-t-md flex justify-center items-center"
                        >
                          <img
                            className="w-[25%] cursor-pointer hover:opacity-50"
                            src="/images/icon-cross.svg"
                            alt=""
                          />
                        </div>
                      </div>
                      {index === lastIndex && (
                        <div
                          onClick={() => deleteCompleted(name)}
                          className="flex justify-between shadow-sm text-gray-400 text-sm px-4 items-center w-[80%] relative bottom-[4.5rem] h-12 mx-auto rounded-b-md"
                        >
                          <p>{needCompleted} items left</p>
                          <p className="cursor-pointer hover:opacity-50">
                            Clear Completed
                          </p>
                        </div>
                      )}
                    </div>
                  );
                })}
            {todos.length > 0 && (
              <>
                <div className="mx-auto shadow-md flex items-center px-12 font-bold text-gray-400 justify-between rounded-md relative bottom-[3rem] h-12 w-[80%]">
                  <h1
                    onClick={() => setSelection("All")}
                    className={
                      selection === "" || selection === "All"
                        ? "text-brightBlue"
                        : "cursor-pointer hover:text-black"
                    }
                  >
                    All
                  </h1>
                  <h1
                    onClick={() => setSelection("Active")}
                    className={
                      selection === "Active"
                        ? "text-brightBlue"
                        : "cursor-pointer hover:text-black"
                    }
                  >
                    Active
                  </h1>
                  <h1
                    onClick={() => setSelection("Completed")}
                    className={
                      selection === "Completed"
                        ? "text-brightBlue"
                        : "cursor-pointer hover:text-black"
                    }
                  >
                    Completed
                  </h1>
                </div>
                <div className="flex justify-center text-gray-400 pb-4">
                  Drag and drop to reorder list
                </div>
                <div className="flex justify-center cursor-pointer">
                  <p onClick={() => signOut()}> Sign out</p>
                </div>
              </>
            )}
          </>
        ) : (
          <>
            <h1 className="text-center">REGISTER</h1>
            <div className="flex text-white font-bold text-2xl justify-center">
              <div className="w-80%">
                <div className="drop-shadow-lg pt-10 text-sm text-black rounded-md h-80">
                  <div className="pl-5 pb-4">
                    <p>Set Username</p>
                    <input
                      placeholder="username"
                      className="drop-shadow-md rounded-sm w-[55%]"
                    ></input>
                    <p className="pt-6 ">Set Password</p>
                    <input
                      placeholder="username"
                      className="drop-shadow-md rounded-sm w-[55%]"
                    ></input>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="bg-black opacity-50 h-[1px] w-[40%]"></div>
                    <h1 className="text-black opacity-50">or</h1>
                    <div className="bg-black h-[1px] opacity-50  w-[40%]"></div>
                  </div>
                  <div className="flex pt-8 justify-center  mx-auto w-[200px] items-center rounded-md shadow-md">
                    <button onClick={() => signIn()}>Login As</button>
                  </div>
                </div>
              </div>
            </div>
          </>
        )}
      </main>
    </>
  );
}

 export async function getServerSideProps(context) {
   const session = await getSession(context);
   const username = session?.user?.name as string;
   const newUsername = username?.replace(/\s+/g, "_");
   return {
     props: {
       name: newUsername ?? ""
     },
   };
 }


